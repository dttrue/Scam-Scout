generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  tier                String          @default("free")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  resetAt             DateTime        @default(now())
  scanCount           Int             @default(0)
  jobListingScanCount Int             @default(0)
  addressScanCount    Int             @default(0) // Track address scans separately
  name                String?
  image               String?
  emailVerified       DateTime?
  accounts            Account[]
  flaggedResults      FlaggedResult[]
  sessions            Session[]
  addressValidations  AddressValidation[] // Relation to AddressValidation
}

model AddressValidation {
  id           String   @id @default(uuid())
  userId       String?  // Optional for non-registered users
  address      String   // The physical address to validate
  domain       String?  // Optional domain/website input
  addressStatus String  // Result of address validation (e.g., "Valid", "Incomplete", "Invalid")
  domainStatus String   // Result of domain check (e.g., "Domain exists", "Unavailable")
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id]) // Relation to User
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  scope             String?
  tokenType         String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FlaggedResult {
  id        String   @id @default(uuid())
  userId    String
  content   String
  result    Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
